import os
import json
import telebot
import schedule
import time
import threading
import http.server
import socketserver
from telebot import types
from datetime import datetime, timedelta

# üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set in environment variables. Set it on Render or locally before running.")

bot = telebot.TeleBot(TOKEN)

# üìö 30-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
tasks = [
    # –ù–µ–¥–µ–ª—è 1
    "–î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–∏ 10 –∫–ª—é—á–µ–≤—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥.",
    "–î–µ–Ω—å 2: –°–æ—Å—Ç–∞–≤—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (–≤–æ–¥–∞, –∑–∞—Ä—è–¥–∫–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è).",
    "–î–µ–Ω—å 3: –û—Ç–∫–∞–∂–∏—Å—å –æ—Ç –æ–¥–Ω–æ–π –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.",
    "–î–µ–Ω—å 4: –í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –º—ã—Å–ª–µ–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.",
    "–î–µ–Ω—å 5: –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
    "–î–µ–Ω—å 6: –°–¥–µ–ª–∞–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å –Ω–∞ 6 —á–∞—Å–æ–≤.",
    "–î–µ–Ω—å 7: –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏, –æ—Ç–º–µ—Ç—å –ø–æ–±–µ–¥—ã.",
    # –ù–µ–¥–µ–ª—è 2
    "–î–µ–Ω—å 8: –ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∞–≤–∏–ª–æ –ü–∞—Ä–µ—Ç–æ 20/80.",
    "–î–µ–Ω—å 9: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–Ω—è.",
    "–î–µ–Ω—å 10: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro (25/5).",
    "–î–µ–Ω—å 11: –ù–∞–≤–µ–¥–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.",
    "–î–µ–Ω—å 12: –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–∫–ª–∞–¥–∫–∏).",
    "–î–µ–Ω—å 13: –°–¥–µ–ª–∞–π 2 —á–∞—Å–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π.",
    "–î–µ–Ω—å 14: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
    # –ù–µ–¥–µ–ª—è 3
    "–î–µ–Ω—å 15: –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
    "–î–µ–Ω—å 16: –ü—Ä–∞–∫—Ç–∏–∫—É–π –ø—É–±–ª–∏—á–Ω—ã–µ –º–∏–Ω–∏-–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è (–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–∞–º–µ—Ä—É).",
    "–î–µ–Ω—å 17: –ù–∞—É—á–∏—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ –≥—Ä–∞–Ω–∏—Ü—ã.",
    "–î–µ–Ω—å 18: –ü—Ä–æ—á–∏—Ç–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é –≤—ã–¥–∞—é—â–µ–≥–æ—Å—è –ª–∏–¥–µ—Ä–∞.",
    "–î–µ–Ω—å 19: –°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ (–ø–æ–º–æ–≥–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏).",
    "–î–µ–Ω—å 20: –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π –∏–¥–µ–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç.",
    "–î–µ–Ω—å 21: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –≤–ª–∏—è–Ω–∏–µ.",
    # –ù–µ–¥–µ–ª—è 4
    "–î–µ–Ω—å 22: –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —É—á—ë–±—ã –Ω–∞ 1 –≥–æ–¥ (–∫–Ω–∏–≥–∏, –∫—É—Ä—Å—ã, –Ω–∞–≤—ã–∫–∏).",
    "–î–µ–Ω—å 23: –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.",
    "–î–µ–Ω—å 24: –ü—Ä–∞–∫—Ç–∏–∫—É–π –≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–Ω—è (—Ä–µ—Ñ–ª–µ–∫—Å–∏—è).",
    "–î–µ–Ω—å 25: –°–æ—Å—Ç–∞–≤—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–¥–æ—Ö–æ–¥—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏).",
    "–î–µ–Ω—å 26: –°–¥–µ–ª–∞–π —Ä–µ–≤–∏–∑–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª—é–¥–∏, –∏–Ω—Ñ–æ–ø–æ—Ç–æ–∫).",
    "–î–µ–Ω—å 27: –ü–æ–¥–µ–ª–∏—Å—å –∑–Ω–∞–Ω–∏—è–º–∏ —Å –∫–µ–º-—Ç–æ (mini-–ª–µ–∫—Ü–∏—è/–ø–æ—Å—Ç).",
    "–î–µ–Ω—å 28: –ò—Ç–æ–≥–∏: —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.",
    "–î–µ–Ω—å 29: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—á—Ç—ã (10 –ª–µ—Ç).",
    "–î–µ–Ω—å 30: –°–æ–∑–¥–∞–π –∫–∞—Ä—Ç—É –∂–∏–∑–Ω–∏ —Å —Ü–µ–ª—è–º–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π."
]

# üìÇ –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_FILE = "progress.json"

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        try:
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_progress():
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_progress, f, ensure_ascii=False, indent=2)

user_progress = load_progress()

# üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    5: "üèÖ –ú–æ–ª–æ–¥–µ—Ü! 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    10: "ü•à –¢—ã –º–∞—à–∏–Ω–∞! 10 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞!",
    20: "ü•á –ñ–µ–ª–µ–∑–Ω–∞—è —Å–∏–ª–∞ –≤–æ–ª–∏! 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    30: "üëë –ì–µ—Ä–æ–π —á–µ–ª–ª–µ–Ω–¥–∂–∞! 30 –¥–Ω–µ–π!"
}

# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(chat_id):
    chat_id = str(chat_id)
    if chat_id not in user_progress:
        user_progress[chat_id] = {
            "day": 0,
            "streak": 0,
            "last_done": "",
            "achievements": []
        }
        save_progress()

# üîÑ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_task(chat_id):
    chat_id = str(chat_id)
    day = user_progress[chat_id]["day"]
    if day < len(tasks):
        return tasks[day]
    return "üéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –ø—Ä–æ—à—ë–ª 30 –¥–Ω–µ–π üöÄ"

# üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def check_achievements(chat_id):
    chat_id = str(chat_id)
    streak = user_progress[chat_id]["streak"]
    unlocked = []
    for threshold, text in ACHIEVEMENTS.items():
        if streak >= threshold and threshold not in user_progress[chat_id]["achievements"]:
            user_progress[chat_id]["achievements"].append(threshold)
            unlocked.append(text)
    if unlocked:
        save_progress()
    return unlocked

# ‚è© –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
def next_task(chat_id):
    chat_id = str(chat_id)
    today = datetime.now().date()
    last_done_str = user_progress[chat_id].get("last_done", "")
    if last_done_str:
        try:
            last_done = datetime.strptime(last_done_str, "%Y-%m-%d").date()
        except Exception:
            last_done = None
        if last_done and today == last_done + timedelta(days=1):
            user_progress[chat_id]["streak"] += 1
        elif last_done == today:
            pass
        else:
            user_progress[chat_id]["streak"] = 1
    else:
        user_progress[chat_id]["streak"] = 1

    user_progress[chat_id]["last_done"] = str(today)
    if user_progress[chat_id]["day"] < len(tasks):
        user_progress[chat_id]["day"] += 1
    save_progress()
    return get_task(chat_id), check_achievements(chat_id)

# üñ≤ Inline-–∫–Ω–æ–ø–∫–∏
def get_inline_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    btn_today = types.InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="today")
    btn_done = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Üí –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next")
    btn_stats = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    btn_sub = types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (09:00)", callback_data="subscribe")
    btn_help = types.InlineKeyboardButton("‚Ñπ –ü–æ–º–æ—â—å", callback_data="help")
    keyboard.add(btn_today)
    keyboard.add(btn_done)
    keyboard.add(btn_stats, btn_sub)
    keyboard.add(btn_help)
    return keyboard

# üöÄ /start
@bot.message_handler(commands=['start'])
def start(message):
    init_user(message.chat.id)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ 30-–¥–Ω–µ–≤–Ω–æ–º –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
        reply_markup=get_inline_keyboard()
    )

# üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    chat_id = str(call.message.chat.id)
    init_user(chat_id)
    data = call.data

    if data == "today":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"üìå –°–µ–≥–æ–¥–Ω—è: {get_task(chat_id)}", reply_markup=get_inline_keyboard())

    elif data == "next":
        bot.answer_callback_query(call.id)
        task, achievements = next_task(chat_id)
        streak = user_progress[chat_id]["streak"]
        day = user_progress[chat_id]["day"]
        text = f"‚û° –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}\n\nüî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\nüìÖ –î–µ–Ω—å {day}/{len(tasks)}"
        bot.send_message(call.message.chat.id, text, reply_markup=get_inline_keyboard())
        for ach in achievements:
            bot.send_message(call.message.chat.id, f"üéâ {ach}")

    elif data == "stats":
        bot.answer_callback_query(call.id)
        streak = user_progress[chat_id]["streak"]
        day = user_progress[chat_id]["day"]
        ach_list = [ACHIEVEMENTS[x].split(" ")[0] for x in user_progress[chat_id]["achievements"] if x in ACHIEVEMENTS]
        ach_text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + (" ".join(ach_list) if ach_list else "–ø–æ–∫–∞ –Ω–µ—Ç")
        bot.send_message(
            call.message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÖ –î–µ–Ω—å: {day}/{len(tasks)}\nüî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n{ach_text}",
            reply_markup=get_inline_keyboard()
        )

    elif data == "subscribe":
        bot.answer_callback_query(call.id)
        init_user(chat_id)
        threading.Thread(target=schedule_checker, args=(int(chat_id),), daemon=True).start()
        bot.send_message(call.message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –ø–∏—Å–∞—Ç—å –≤ 09:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.", reply_markup=get_inline_keyboard())

    elif data == "help":
        bot.answer_callback_query(call.id)
        bot.send_message(
            call.message.chat.id,
            "‚Ñπ –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–π—Ç–∏ 30-–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è:\n"
            "üìÖ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚úÖ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é\n"
            "üìä ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "üîî ‚Äî –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 09:00\n\n"
            "üéØ –í—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏-–º–µ–¥–∞–ª–∏!",
            reply_markup=get_inline_keyboard()
        )

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_checker(chat_id):
    schedule.every().day.at("09:00").do(lambda: send_scheduled_task(chat_id))
    while True:
        schedule.run_pending()
        time.sleep(30)

def send_scheduled_task(chat_id):
    try:
        task, achievements = next_task(chat_id)
        streak = user_progress[str(chat_id)]["streak"]
        day = user_progress[str(chat_id)]["day"]
        text = f"üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{task}\n\nüî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\nüìÖ –î–µ–Ω—å {day}/{len(tasks)}"
        bot.send_message(chat_id, text, reply_markup=get_inline_keyboard())
        for ach in achievements:
            bot.send_message(chat_id, f"üéâ {ach}")
    except Exception as e:
        print(f"Error in scheduled task for {chat_id}: {e}")

# üåê HTTP-—Å–µ—Ä–≤–µ—Ä —Å healthcheck
class HealthHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/ping":
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.end_headers()

def start_web_server():
    port = int(os.getenv("PORT", 10000))
    with socketserver.TCPServer(("", port), HealthHandler) as httpd:
        print(f"‚úÖ Web server running on port {port}")
        httpd.serve_forever()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    threading.Thread(target=start_web_server, daemon=True).start()
    try:
        bot.polling(non_stop=True)
    except KeyboardInterrupt:
        print("Stopping bot...")
