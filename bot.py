import os
import random
import telebot
from flask import Flask, request
import logging
from logging.handlers import RotatingFileHandler
from threading import Thread
from queue import Queue
import time
import signal
import sys

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        RotatingFileHandler('bot.log', maxBytes=1000000, backupCount=5)
    ]
)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.getenv("PORT", 10000))

if not TOKEN or not RENDER_EXTERNAL_URL:
    logger.error("BOT_TOKEN –∏ RENDER_EXTERNAL_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")
    raise ValueError("BOT_TOKEN –∏ RENDER_EXTERNAL_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ ---
advices = []
if os.path.exists("advices.txt"):
    with open("advices.txt", encoding="utf-8") as f:
        advices = [line.strip() for line in f if line.strip()]
if not advices:
    advices = [
        "–ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã",
        "–í—ã—Ö–æ–¥–∏ –≥—É–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        "–í—ã—Å—ã–ø–∞–π—Å—è ‚Äî —Å–æ–Ω –ª–µ—á–∏—Ç –≤—Å—ë",
        "–í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "–£—á–∏—Å—å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    ]

emojis = ["üåü", "‚ú®", "üî•", "üí°", "üåà", "üíñ", "üåû", "üçÄ", "‚ö°", "üåä"]

# --- –û—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤ ---
update_queue = Queue()

def worker():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤"""
    while True:
        update = update_queue.get()
        if update is None:  # —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            break
        try:
            bot.process_new_updates([update])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")
        update_queue.task_done()

worker_thread = Thread(target=worker, daemon=True)
worker_thread.start()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=["start"])
def start(msg):
    bot.reply_to(msg, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–≤–µ—Ç—á–∏–∫ üßô‚Äç‚ôÇÔ∏è\n–ù–∞–ø–∏—à–∏ /advice, –∏ —è –¥–∞–º —Å–æ–≤–µ—Ç!")

@bot.message_handler(commands=["advice"])
def advice(msg):
    if random.randint(1, 5) == 1:
        text = random.choice(emojis)
    else:
        text = f"{random.choice(advices)} {random.choice(emojis)}"
    bot.reply_to(msg, text)

@bot.message_handler(content_types=["text"])
def handle_text(msg):
    bot.reply_to(msg, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –∏ /advice üòä")

# --- Webhook Flask endpoint ---
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        update_queue.put(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
def signal_handler(sig, frame):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {sig}")
    update_queue.put(None)  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook"
try:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ Flask ---
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 0.0.0.0:{PORT}")
    app.run(host="0.0.0.0", port=PORT)
