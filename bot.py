import os
import random
import telebot
from flask import Flask, request
import logging
from logging.handlers import RotatingFileHandler
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        RotatingFileHandler('bot.log', maxBytes=1000000, backupCount=5)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = os.getenv("PORT", 5000)

logger.debug(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN={'<—Å–∫—Ä—ã—Ç>' if TOKEN else None}, "
             f"RENDER_EXTERNAL_URL={RENDER_EXTERNAL_URL}, PORT={PORT}")

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not RENDER_EXTERNAL_URL:
    logger.error("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
try:
    bot = telebot.TeleBot(TOKEN)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    raise

app = Flask(__name__)
logger.info("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
advices = []
try:
    if os.path.exists("advices.txt"):
        with open("advices.txt", encoding="utf-8") as f:
            advices = [line.strip() for line in f if line.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(advices)} —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ advices.txt")
    else:
        advices = [
            "–ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            "–í—ã—Ö–æ–¥–∏ –≥—É–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "–í—ã—Å—ã–ø–∞–π—Å—è ‚Äî —Å–æ–Ω –ª–µ—á–∏—Ç –≤—Å—ë",
            "–í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
            "–£—á–∏—Å—å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "–î–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏",
            "–ú–µ–Ω—å—à–µ —Å–æ—Ü—Å–µ—Ç–µ–π ‚Äî –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏",
            "–ó–∞–Ω–∏–º–∞–π—Å—è —Å–ø–æ—Ä—Ç–æ–º —Ö–æ—Ç—è –±—ã 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
            "–ú–µ–¥–∏—Ç–∏—Ä—É–π –∏ –æ—Ç–¥—ã—Ö–∞–π –æ—Ç —Å—Ç—Ä–µ—Å—Å–∞",
            "–ü–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º ‚Äî –¥–æ–±—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è",
        ]
        logger.info(f"–§–∞–π–ª advices.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã ({len(advices)})")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ advices.txt: {str(e)}")
    raise

# –°–º–∞–π–ª—ã
emojis = ["üåü", "‚ú®", "üî•", "üí°", "üåà", "üíñ", "üåû", "üçÄ", "‚ö°", "üåä"]
logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(emojis)} —ç–º–æ–¥–∑–∏")

# –•—ç–Ω–¥–ª–µ—Ä—ã
@bot.message_handler(commands=["start"])
def start(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    try:
        bot.reply_to(msg, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–≤–µ—Ç—á–∏–∫ üßô‚Äç‚ôÇÔ∏è\n–ù–∞–ø–∏—à–∏ /advice, –∏ —è –¥–∞–º —Å–æ–≤–µ—Ç!")
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /start: {str(e)}")

@bot.message_handler(commands=["advice"])
def advice(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /advice –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    try:
        if random.randint(1, 5) == 1:  # —à–∞–Ω—Å 1 –∏–∑ 5 ‚Äî —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª
            text = random.choice(emojis)
            logger.debug(f"–í—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏: {text}")
        else:
            advice_text = random.choice(advices)
            emoji = random.choice(emojis)
            text = f"{advice_text} {emoji}"
            logger.debug(f"–í—ã–±—Ä–∞–Ω —Å–æ–≤–µ—Ç: {text}")
        bot.reply_to(msg, text)
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ /advice –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /advice: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=["text"])
def handle_text(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.id} (@{msg.from_user.username}): {msg.text}")
    try:
        bot.reply_to(msg, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –∏ /advice üòä")
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

# Flask endpoint –¥–ª—è Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        json_str = request.get_data().decode("utf-8")
        logger.debug(f"–í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json_str}")
        update = telebot.types.Update.de_json(json_str)
        if update is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return "ok", 200
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: update_id={update.update_id}")
        bot.process_new_updates([update])
        logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return "ok", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return "ok", 200

# Healthcheck
@app.route("/", methods=["GET"])
def index():
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.route("/test", methods=["POST"])
def test():
    logger.debug("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ /test")
    try:
        data = request.get_data().decode("utf-8")
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {data}")
        return "–¢–µ—Å—Ç OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return "error", 500

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    # URL Render-–∞
    WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook"
    logger.debug(f"WEBHOOK_URL: {WEBHOOK_URL}")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    try:
        bot.remove_webhook()
        logger.info("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    try:
        result = bot.set_webhook(url=WEBHOOK_URL)
        if result:
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise

    # –ó–∞–ø—É—Å–∫ Flask
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 0.0.0.0:{PORT}")
        app.run(host="0.0.0.0", port=int(PORT))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flask —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        raise
