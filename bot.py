import os
import random
import logging
from logging.handlers import RotatingFileHandler
from queue import Queue
from threading import Thread
from flask import Flask, request
import telebot

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(), RotatingFileHandler('bot.log', maxBytes=1_000_000, backupCount=3)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app = Flask(__name__)
bot = telebot.TeleBot(os.getenv("BOT_TOKEN") or (logger.error("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!") or exit(1)))
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL") or (logger.error("RENDER_EXTERNAL_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!") or exit(1))
PORT = int(os.getenv("PORT", 10000))

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
def load_advices(file_path="advices.txt"):
    try:
        with open(file_path, encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()] or _default_advices()
    except FileNotFoundError:
        return _default_advices()

def _default_advices():
    return ["–ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã", "–í—ã—Ö–æ–¥–∏ –≥—É–ª—è—Ç—å", "–í—ã—Å—ã–ø–∞–π—Å—è", "–í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏", "–£—á–∏—Å—å –Ω–æ–≤–æ–º—É"]

advices = load_advices()
emojis = ["üåü", "‚ú®", "üî•", "üí°", "üåà"]

# –û—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
update_queue = Queue(maxsize=100)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏

def process_updates():
    while True:
        try:
            update = update_queue.get(timeout=10)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            if update is None: break
            bot.process_new_updates([update])
            update_queue.task_done()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")

Thread(target=process_updates, daemon=True).start()

# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def start(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {msg.from_user.id}")
    bot.reply_to(msg, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–≤–µ—Ç—á–∏–∫ üßô‚Äç‚ôÇÔ∏è\n–ù–∞–ø–∏—à–∏ /advice –¥–ª—è —Å–æ–≤–µ—Ç–∞!")

@bot.message_handler(commands=["advice"])
def advice(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /advice –æ—Ç {msg.from_user.id}")
    text = random.choice(emojis) if random.random() < 0.2 else f"{random.choice(advices)} {random.choice(emojis)}"
    bot.reply_to(msg, text)

@bot.message_handler(content_types=["text"])
def handle_text(msg):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {msg.from_user.id}: {msg.text}")
    bot.reply_to(msg, "–ü–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ /start –∏ /advice üòä")

# Webhook
@app.post("/webhook")
def webhook():
    try:
        data = request.get_data().decode("utf-8")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç: {data}")
        update = telebot.types.Update.de_json(data)
        if update:
            update_queue.put(update)
            return "ok", 200
        logger.warning("–ü—É—Å—Ç–æ–π –∞–ø–¥–µ–π—Ç")
        return "ok", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "error", 500

@app.get("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def set_webhook_with_retry(attempts=3, delay=5):
    for attempt in range(attempts):
        try:
            bot.set_webhook(url=f"{WEBHOOK_URL}/webhook", drop_pending_updates=True)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
            return
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{attempts} —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < attempts - 1:
                import time
                time.sleep(delay)
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
    exit(1)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    set_webhook_with_retry()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{PORT}")
    app.run(host="0.0.0.0", port=PORT, debug=False)
