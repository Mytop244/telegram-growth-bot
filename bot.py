import os
import logging
import random
from time import sleep
from flask import Flask, request
from telebot import TeleBot, types
from telebot.util import escape_markdown
import psycopg2
from psycopg2.pool import SimpleConnectionPool
import pendulum
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from threading import Lock
import atexit
import requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
ADMIN_ID = int(os.getenv('TELEGRAM_ADMIN_ID', '0') or 0)
DEFAULT_TIMEZONE = os.getenv('BOT_TIMEZONE', 'UTC')
REMINDER_HOUR = os.getenv('REMINDER_HOUR', '09:00')
WEBHOOK_URL = f'https://{RENDER_EXTERNAL_HOSTNAME}/webhook' if RENDER_EXTERNAL_HOSTNAME else None

if not BOT_TOKEN or not DATABASE_URL:
    logging.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: BOT_TOKEN –∏–ª–∏ DATABASE_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    raise SystemExit(1)

# --- Flask –∏ TeleBot ---
app = Flask(__name__)
bot = TeleBot(BOT_TOKEN)

# --- –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
db_pool = SimpleConnectionPool(1, 10, DATABASE_URL)

def get_conn():
    return db_pool.getconn()

def put_conn(conn):
    db_pool.putconn(conn)

@atexit.register
def close_pool():
    if db_pool:
        db_pool.closeall()
        logging.info("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç—ã.")

# --- RateLimiter ---
class RateLimiter:
    def __init__(self, max_calls=60, period=60):
        self.max_calls = max_calls
        self.period = period
        self.calls = []
        self.lock = Lock()

    def __enter__(self):
        with self.lock:
            now = pendulum.now().timestamp()
            self.calls = [t for t in self.calls if now - t < self.period]
            if len(self.calls) >= self.max_calls:
                wait = self.period - (now - self.calls[0])
                if wait > 0:
                    sleep(wait)
            self.calls.append(now)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

rate_limiter = RateLimiter(max_calls=60, period=60)

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
def notify_admin_safe(text):
    if ADMIN_ID:
        try:
            bot.send_message(ADMIN_ID, text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

def send_message_with_rate_limit(chat_id, text, **kwargs):
    logging.info(f"Attempting to send message to chat_id={chat_id}, text={text[:50]}...")
    with rate_limiter:
        last_exc = None
        for attempt in range(5):
            try:
                msg = bot.send_message(chat_id, text, **kwargs)
                logging.info(f"Message sent to chat_id={chat_id}, message_id={getattr(msg, 'message_id', None)}")
                return msg
            except Exception as e:
                last_exc = e
                logging.warning(f"Attempt {attempt+1}/5 failed for chat_id={chat_id}: {e}")
                sleep(2 ** attempt)
        logging.error(f"Failed to send message to chat_id={chat_id} after 5 attempts: {last_exc}")
        if chat_id != ADMIN_ID:
            notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id}: {str(last_exc)[:200]}")
        return None

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
def init_db():
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    timezone TEXT DEFAULT %s,
                    subscribed BOOLEAN DEFAULT FALSE,
                    last_menu_message_id BIGINT,
                    created_at TIMESTAMPTZ DEFAULT NOW()
                )
            ''', (DEFAULT_TIMEZONE,))
            cur.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT,
                    task_date DATE,
                    completed BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (chat_id) REFERENCES users (chat_id) ON DELETE CASCADE
                )
            ''')
            cur.execute('CREATE INDEX IF NOT EXISTS idx_tasks_chat_id_date ON tasks (chat_id, task_date)')
            conn.commit()
            logging.info('–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')
        notify_admin_safe(f'‚ö† –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')
        raise
    finally:
        put_conn(conn)

def get_user(chat_id):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT chat_id, username, timezone, subscribed, last_menu_message_id FROM users WHERE chat_id = %s', (chat_id,))
            user = cur.fetchone()
            return {
                'chat_id': user[0],
                'username': user[1],
                'timezone': user[2],
                'subscribed': user[3],
                'last_menu_message_id': user[4]
            } if user else None
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ get_user –¥–ª—è chat_id={chat_id}: {e}')
        return None
    finally:
        put_conn(conn)

def update_user(chat_id, **kwargs):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            if kwargs:
                fields = ', '.join(f'{k} = %s' for k in kwargs)
                values = list(kwargs.values()) + [chat_id]
                cur.execute(f'UPDATE users SET {fields} WHERE chat_id = %s', values)
                if cur.rowcount == 0:
                    cur.execute('''
                        INSERT INTO users (chat_id, username, timezone, subscribed, last_menu_message_id)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (chat_id) DO UPDATE
                        SET username = EXCLUDED.username,
                            timezone = EXCLUDED.timezone,
                            subscribed = EXCLUDED.subscribed,
                            last_menu_message_id = EXCLUDED.last_menu_message_id
                    ''', (
                        chat_id,
                        kwargs.get('username'),
                        kwargs.get('timezone', DEFAULT_TIMEZONE),
                        kwargs.get('subscribed', False),
                        kwargs.get('last_menu_message_id')
                    ))
            conn.commit()
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å chat_id={chat_id} –æ–±–Ω–æ–≤–ª—ë–Ω/—Å–æ–∑–¥–∞–Ω')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ update_user –¥–ª—è chat_id={chat_id}: {e}')
    finally:
        put_conn(conn)

def add_task(chat_id, task_date, completed=False):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('INSERT INTO tasks (chat_id, task_date, completed) VALUES (%s, %s, %s)', (chat_id, task_date, completed))
            conn.commit()
            logging.info(f'–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è chat_id={chat_id}, task_date={task_date}')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ add_task –¥–ª—è chat_id={chat_id}: {e}')
    finally:
        put_conn(conn)

def get_tasks(chat_id, start_date, end_date):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT task_date, completed FROM tasks WHERE chat_id = %s AND task_date BETWEEN %s AND %s ORDER BY task_date', (chat_id, start_date, end_date))
            tasks = cur.fetchall()
            return [{'task_date': t[0], 'completed': t[1]} for t in tasks]
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ get_tasks –¥–ª—è chat_id={chat_id}: {e}')
        return []
    finally:
        put_conn(conn)

def cleanup_inactive_users():
    conn = get_conn()
    try:
        cutoff = pendulum.now('UTC').subtract(months=1)
        with conn.cursor() as cur:
            cur.execute('DELETE FROM users WHERE created_at < %s AND subscribed = FALSE', (cutoff,))
            conn.commit()
            logging.info("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ cleanup_inactive_users: {e}")
        notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        put_conn(conn)

# --- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã ---
MOTIVATIONAL_QUOTES = [
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ü–µ–ª—è–º!",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_inline_keyboard(user):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton('‚úÖ –°–µ–≥–æ–¥–Ω—è', callback_data='today'),
        types.InlineKeyboardButton('üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', callback_data='next')
    )
    subscribe_text = 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è' if user.get('subscribed', False) else 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
    keyboard.add(types.InlineKeyboardButton(subscribe_text, callback_data='subscribe'))
    keyboard.add(types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats'))
    keyboard.add(types.InlineKeyboardButton('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data='settimezone'))
    return keyboard

# --- –ú–µ–Ω—é ---
def send_menu(chat_id, user, text):
    logging.info(f"Sending menu to chat_id={chat_id}, text={text[:50]}...")
    try:
        fresh_user = get_user(chat_id) or user or {'subscribed': False, 'timezone': DEFAULT_TIMEZONE}
        prev_id = fresh_user.get('last_menu_message_id')
        username = f"@{fresh_user.get('username')}" if fresh_user.get('username') else "–¥—Ä—É–≥"
        motivation = random.choice(MOTIVATIONAL_QUOTES)
        formatted_text = f"*{escape_markdown(text, version=2)}*\n\n_{escape_markdown(motivation, version=2)}_"
        if prev_id:
            try:
                bot.edit_message_text(
                    formatted_text,
                    chat_id,
                    prev_id,
                    parse_mode="MarkdownV2",
                    reply_markup=get_inline_keyboard(fresh_user)
                )
                logging.info(f"Menu updated for chat_id={chat_id}, message_id={prev_id}")
                return
            except Exception as e:
                logging.warning(f"Failed to update menu message_id={prev_id} for chat_id={chat_id}: {e}")
                update_user(chat_id, last_menu_message_id=None)
        msg = send_message_with_rate_limit(
            chat_id,
            formatted_text,
            parse_mode="MarkdownV2",
            reply_markup=get_inline_keyboard(fresh_user)
        )
        if msg:
            update_user(chat_id, last_menu_message_id=msg.message_id)
            logging.info(f"Menu sent for chat_id={chat_id}, message_id={msg.message_id}")
    except Exception as e:
        logging.error(f"Error in send_menu for chat_id={chat_id}: {e}")
        try:
            send_message_with_rate_limit(chat_id, escape_markdown("‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!", version=2), parse_mode="MarkdownV2")
        except Exception:
            notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ send_menu –¥–ª—è {chat_id}: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã –∏ callbacks ---
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    username = message.from_user.username or "–¥—Ä—É–≥"
    logging.info(f"Processing /start for chat_id={chat_id}, username=@{username}")
    update_user(chat_id, username=username)
    safe_username = escape_markdown(username, version=2)
    send_menu(chat_id, None, f"–ü—Ä–∏–≤–µ—Ç, @{safe_username}! üëã –Ø —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º.")

@bot.message_handler(commands=['stats'])
def stats(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    if not user:
        send_message_with_rate_limit(chat_id, escape_markdown("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å /start", version=2), parse_mode="MarkdownV2")
        return
    start_date = pendulum.now(user['timezone']).subtract(weeks=1).date()
    end_date = pendulum.now(user['timezone']).date()
    tasks = get_tasks(chat_id, start_date, end_date)
    completed = sum(1 for t in tasks if t['completed'])
    total = len(tasks)
    percentage = (completed / total * 100) if total > 0 else 0
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}/{total} ({percentage:.1f}%)"
    send_message_with_rate_limit(chat_id, escape_markdown(text, version=2), parse_mode="MarkdownV2")

@bot.message_handler(commands=['all_stats'])
def all_stats(message):
    chat_id = message.chat.id
    if chat_id != ADMIN_ID:
        logging.warning(f"Unauthorized /all_stats attempt by chat_id={chat_id}")
        return
    logging.info("Processing /all_stats")
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT COUNT(*) FROM users WHERE subscribed = TRUE')
            subscribed = cur.fetchone()[0]
            cur.execute('SELECT COUNT(*) FROM tasks WHERE completed = TRUE')
            completed = cur.fetchone()[0]
            cur.execute('SELECT COUNT(*) FROM tasks')
            total = cur.fetchone()[0]
            percentage = (completed / total * 100) if total > 0 else 0
            text = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribed}\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed}/{total} ({percentage:.1f}%)"
            send_message_with_rate_limit(chat_id, escape_markdown(text, version=2), parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ all_stats: {e}")
        notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ all_stats: {e}")
        send_message_with_rate_limit(chat_id, escape_markdown(f"‚ö† –û—à–∏–±–∫–∞: {e}", version=2), parse_mode="MarkdownV2")
    finally:
        put_conn(conn)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
scheduler = BackgroundScheduler()
try:
    hour, minute = map(int, REMINDER_HOUR.split(':'))
except Exception:
    hour, minute = 9, 0

scheduler.add_job(cleanup_inactive_users, 'cron', hour=0, minute=0, timezone='UTC')
for tz in ['Europe/Moscow', 'Europe/London', 'America/New_York', 'Asia/Tokyo', 'UTC']:
    scheduler.add_job(
        lambda tz=tz: send_menu_for_tz(tz),
        CronTrigger(hour=hour, minute=minute, timezone=tz)
    )
scheduler.start()

def send_menu_for_tz(timezone):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT chat_id FROM users WHERE subscribed = TRUE AND timezone = %s', (timezone,))
            users = cur.fetchall()
            for (chat_id,) in users:
                send_menu(chat_id, None, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {timezone}: {e}")
        notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {timezone}: {e}")
    finally:
        put_conn(conn)

# --- Webhook ---
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = types.Update.de_json(request.get_json())
        if update:
            bot.process_new_updates([update])
        return '', 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return '', 500

@app.route('/')
def index():
    return '–ü—Ä–∏–≤–µ—Ç, —è –∂–∏–≤!'

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
def ensure_webhook(max_retries=3, delay=3):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. """
    for attempt in range(1, max_retries + 1):
        try:
            resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo").json()
            if resp.get("ok"):
                info = resp["result"]
                url = info.get("url")
                pending = info.get("pending_update_count", 0)
                if not url:
                    logging.warning(f"‚ö† –í–µ–±—Ö—É–∫ –ø—É—Å—Ç–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}) ‚Äî –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
                    bot.set_webhook(url=WEBHOOK_URL)
                    sleep(delay)
                else:
                    logging.info(f"üì° –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–µ–Ω: {url}, pending_updates={pending}")
                    if pending > 0:
                        notify_admin_safe(f"‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –≤ –æ—á–µ—Ä–µ–¥–∏ Telegram –æ—Å—Ç–∞–ª–æ—Å—å {pending} –∞–ø–¥–µ–π—Ç–æ–≤.")
                    return True
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ getWebhookInfo: {resp}")
                notify_admin_safe(f"‚ùå –û—à–∏–±–∫–∞ getWebhookInfo: {resp}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ ensure_webhook: {e}")
            notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ ensure_webhook: {e}")
            sleep(delay)
    logging.error("‚ùå –í–µ–±—Ö—É–∫ —Ç–∞–∫ –∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    notify_admin_safe("‚ùå –í–µ–±—Ö—É–∫ —Ç–∞–∫ –∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return False

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == '__main__':
    init_db()
    if WEBHOOK_URL:
        try:
            bot.remove_webhook(drop_pending_updates=True)
            sleep(1)
            success = bot.set_webhook(url=WEBHOOK_URL)
            if success:
                logging.info(f"üîó –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
                ensure_webhook()
                # üîÑ –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
                check_interval = int(os.getenv("WEBHOOK_CHECK_INTERVAL", 10))
                scheduler.add_job(ensure_webhook, 'interval', minutes=check_interval)
                logging.info(f"üïí –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ {check_interval} –º–∏–Ω.)")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ (set_webhook –≤–µ—Ä–Ω—É–ª False)")
                notify_admin_safe("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ (set_webhook –≤–µ—Ä–Ω—É–ª False)")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            notify_admin_safe(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        logging.info("WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ polling —Ä–µ–∂–∏–º–µ (–ª–æ–∫–∞–ª—å–Ω–æ).")
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
