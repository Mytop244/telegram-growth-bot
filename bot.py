import os
import telebot
import schedule
import time
import threading
import logging
import http.server
import socketserver
import psycopg2
from psycopg2.extras import RealDictCursor
from telebot import types
from datetime import datetime, timedelta

# üîë –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# üîë –¢–æ–∫–µ–Ω –∫–ª—é—á –¥–ª—è —Ç–µ–ª–µ–≥–∏, —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ä–µ–Ω–¥–µ—Ä–µ
TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables.")
bot = telebot.TeleBot(TOKEN)

# üåç Render hostname (–¥–ª—è –≤–µ–±—Ö—É–∫–∞)
HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOSTNAME:
    raise RuntimeError("RENDER_EXTERNAL_HOSTNAME is not set.")
WEBHOOK_URL = f"https://{HOSTNAME}/webhook"

# üëë –ê–¥–º–∏–Ω
ADMIN_ID = os.getenv("TELEGRAM_ADMIN_ID")

# üìö 30-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
TASKS = [
    "–î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–∏ 10 –∫–ª—é—á–µ–≤—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥.",
    "–î–µ–Ω—å 2: –°–æ—Å—Ç–∞–≤—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (–≤–æ–¥–∞, –∑–∞—Ä—è–¥–∫–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è).",
    "–î–µ–Ω—å 3: –û—Ç–∫–∞–∂–∏—Å—å –æ—Ç –æ–¥–Ω–æ–π –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.",
    "–î–µ–Ω—å 4: –í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –º—ã—Å–ª–µ–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.",
    "–î–µ–Ω—å 5: –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
    "–î–µ–Ω—å 6: –°–¥–µ–ª–∞–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å –Ω–∞ 6 —á–∞—Å–æ–≤.",
    "–î–µ–Ω—å 7: –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏, –æ—Ç–º–µ—Ç—å –ø–æ–±–µ–¥—ã.",
    "–î–µ–Ω—å 8: –ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∞–≤–∏–ª–æ –ü–∞—Ä–µ—Ç–æ 20/80.",
    "–î–µ–Ω—å 9: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–Ω—è.",
    "–î–µ–Ω—å 10: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro (25/5).",
    "–î–µ–Ω—å 11: –ù–∞–≤–µ–¥–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.",
    "–î–µ–Ω—å 12: –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.",
    "–î–µ–Ω—å 13: –°–¥–µ–ª–∞–π 2 —á–∞—Å–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã.",
    "–î–µ–Ω—å 14: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
    "–î–µ–Ω—å 15: –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
    "–î–µ–Ω—å 16: –ü—Ä–∞–∫—Ç–∏–∫—É–π –ø—É–±–ª–∏—á–Ω—ã–µ –º–∏–Ω–∏-–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.",
    "–î–µ–Ω—å 17: –ù–∞—É—á–∏—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª.",
    "–î–µ–Ω—å 18: –ü—Ä–æ—á–∏—Ç–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ª–∏–¥–µ—Ä–∞.",
    "–î–µ–Ω—å 19: –°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ.",
    "–î–µ–Ω—å 20: –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç.",
    "–î–µ–Ω—å 21: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    "–î–µ–Ω—å 22: –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —É—á—ë–±—ã –Ω–∞ 1 –≥–æ–¥.",
    "–î–µ–Ω—å 23: –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.",
    "–î–µ–Ω—å 24: –ü—Ä–∞–∫—Ç–∏–∫—É–π –≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑.",
    "–î–µ–Ω—å 25: –°–æ—Å—Ç–∞–≤—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
    "–î–µ–Ω—å 26: –°–¥–µ–ª–∞–π —Ä–µ–≤–∏–∑–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
    "–î–µ–Ω—å 27: –ü–æ–¥–µ–ª–∏—Å—å –∑–Ω–∞–Ω–∏—è–º–∏.",
    "–î–µ–Ω—å 28: –ò—Ç–æ–≥–∏: —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü.",
    "–î–µ–Ω—å 29: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—á—Ç—ã.",
    "–î–µ–Ω—å 30: –°–æ–∑–¥–∞–π –∫–∞—Ä—Ç—É –∂–∏–∑–Ω–∏."
]

# üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    5: "üèÖ –ú–æ–ª–æ–¥–µ—Ü! 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    10: "ü•à –¢—ã –º–∞—à–∏–Ω–∞! 10 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞!",
    20: "ü•á –ñ–µ–ª–µ–∑–Ω–∞—è —Å–∏–ª–∞ –≤–æ–ª–∏! 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    30: "üëë –ì–µ—Ä–æ–π —á–µ–ª–ª–µ–Ω–¥–∂–∞! 30 –¥–Ω–µ–π!"
}

# üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is not set.")

def get_db():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def init_db():
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º —Å –∫–æ–ª–æ–Ω–∫–æ–π last_menu_message_id
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        chat_id BIGINT PRIMARY KEY,
        day INTEGER DEFAULT 1,
        streak INTEGER DEFAULT 0,
        last_done DATE,
        achievements TEXT[] DEFAULT '{}',
        subscribed BOOLEAN DEFAULT FALSE,
        username TEXT,
        last_menu_message_id INTEGER
    );
    """)
    conn.commit()
    cur.close()
    conn.close()

init_db()

# üìå –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def init_user(chat_id, username=None):
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
        user = cur.fetchone()
        if not user:
            cur.execute("INSERT INTO users (chat_id, username, day) VALUES (%s, %s, %s)", (chat_id, username, 1))
            conn.commit()
    finally:
        cur.close()
        conn.close()

def get_user(chat_id):
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
        user = cur.fetchone()
        return user
    finally:
        cur.close()
        conn.close()

def update_user(chat_id, **kwargs):
    if not kwargs:
        return
    conn = get_db()
    cur = conn.cursor()
    try:
        fields = ", ".join([f"{k} = %s" for k in kwargs.keys()])
        values = list(kwargs.values())
        values.append(chat_id)
        cur.execute(f"UPDATE users SET {fields} WHERE chat_id = %s", tuple(values))
        conn.commit()
    finally:
        cur.close()
        conn.close()

# üîÑ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
def get_task(user):
    day = user.get('day') or 1
    idx = max(0, min(len(TASKS)-1, day-1))
    return TASKS[idx]

# üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def check_achievements(user):
    unlocked = []
    current_streak = user.get('streak') or 0
    existing = user.get('achievements') or []
    for threshold, text in ACHIEVEMENTS.items():
        str_threshold = str(threshold)
        if current_streak >= threshold and str_threshold not in existing:
            new_achievements = existing + [str_threshold]
            update_user(user['chat_id'], achievements=new_achievements)
            unlocked.append(text)
            existing = new_achievements
    return unlocked

# ‚è© –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
def next_task(user):
    today = datetime.utcnow().date()
    last_done = user.get('last_done')
    streak = user.get('streak') or 0

    if last_done:
        if today == last_done + timedelta(days=1):
            streak += 1
        elif today == last_done:
            pass
        else:
            streak = 1
    else:
        streak = 1

    current_day = user.get('day') or 1
    new_day = current_day + 1 if current_day < len(TASKS) else current_day
    update_user(user['chat_id'], day=new_day, streak=streak, last_done=today)
    user = get_user(user['chat_id'])
    return get_task(user), check_achievements(user), user

# üñ≤ –ö–Ω–æ–ø–∫–∏
def get_inline_keyboard(user):
    if not user:
        user = {'subscribed': False}
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        ("üìÖ –°–µ–≥–æ–¥–Ω—è", "today"),
        ("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "next"),
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
        ("‚Ñπ –ü–æ–º–æ—â—å", "help"),
        ("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if user.get('subscribed') else "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "unsubscribe" if user.get('subscribed') else "subscribe")
    ]
    keyboard.add(
        types.InlineKeyboardButton(buttons[0][0].ljust(12, '\u00A0'), callback_data=buttons[0][1]),
        types.InlineKeyboardButton(buttons[1][0].ljust(12, '\u00A0'), callback_data=buttons[1][1])
    )
    keyboard.add(
        types.InlineKeyboardButton(buttons[2][0].ljust(12, '\u00A0'), callback_data=buttons[2][1]),
        types.InlineKeyboardButton(buttons[3][0].ljust(12, '\u00A0'), callback_data=buttons[3][1])
    )
    keyboard.add(
        types.InlineKeyboardButton(buttons[4][0].ljust(12, '\u00A0'), callback_data=buttons[4][1])
    )
    return keyboard

# === –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: send_menu ===
def send_menu(chat_id, user, text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
    - –æ—á–∏—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å),
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π,
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –≤ users.last_menu_message_id.
    """
    try:
        prev_id = user.get('last_menu_message_id')
        if prev_id:
            try:
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=prev_id, reply_markup=None)
            except Exception as e:
                # —á–∞—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º -> –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                logging.debug(f"Can't clear previous menu {prev_id} for {chat_id}: {e}")

        msg = bot.send_message(chat_id, text, reply_markup=get_inline_keyboard(user))
        update_user(chat_id, last_menu_message_id=msg.message_id)
    except Exception as e:
        logging.error(f"send_menu error for {chat_id}: {e}")

# ‚ñ∂Ô∏è /start
@bot.message_handler(commands=['start'])
def start(message):
    init_user(message.chat.id, message.from_user.username)
    user = get_user(message.chat.id)
    send_menu(
        message.chat.id,
        user,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ 30-–¥–Ω–µ–≤–Ω–æ–º –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
    )

# üìä /stats
@bot.message_handler(commands=['stats'])
def stats(message):
    user = get_user(message.chat.id)
    ach_list = []
    for x in (user.get('achievements') or []):
        try:
            ach_list.append(ACHIEVEMENTS.get(int(x), ""))
        except Exception:
            pass
    ach_text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + ("\n".join(ach_list) if ach_list else "–ø–æ–∫–∞ –Ω–µ—Ç")
    send_menu(
        message.chat.id,
        user,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÖ –î–µ–Ω—å: {user.get('day')}/{len(TASKS)}\nüî• –°–µ—Ä–∏—è: {user.get('streak') or 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n{ach_text}"
    )

# üëë /all_stats (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@bot.message_handler(commands=['all_stats'])
def all_stats(message):
    if str(message.chat.id) != str(ADMIN_ID):
        bot.send_message(message.chat.id, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM users ORDER BY day DESC;")
        users = cur.fetchall()
    finally:
        cur.close()
        conn.close()

    if not users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
    for u in users:
        uname = f"@{u['username']}" if u.get('username') else u['chat_id']
        text += f"- {uname}: –¥–µ–Ω—å {u.get('day')}, —Å–µ—Ä–∏—è {u.get('streak')} –¥–Ω–µ–π\n"
    bot.send_message(message.chat.id, text)

# üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    chat_id = call.message.chat.id
    init_user(chat_id, call.from_user.username)
    user = get_user(chat_id)
    data = call.data

    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.warning(f"Callback error: {e}")

    if data == "today":
        send_menu(chat_id, user, f"üìå –°–µ–≥–æ–¥–Ω—è: {get_task(user)}")

    elif data == "next":
        task, achievements, user = next_task(user)
        text = f"‚û° –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}\n\nüî• –°–µ—Ä–∏—è: {user.get('streak')} –¥–Ω–µ–π\nüìÖ –î–µ–Ω—å {user.get('day')}/{len(TASKS)}"
        send_menu(chat_id, user, text)
        for ach in achievements:
            bot.send_message(chat_id, f"üéâ {ach}")

    elif data == "stats":
        ach_list = []
        for x in (user.get('achievements') or []):
            try:
                ach_list.append(ACHIEVEMENTS.get(int(x), ""))
            except Exception:
                pass
        ach_text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + ("\n".join(ach_list) if ach_list else "–ø–æ–∫–∞ –Ω–µ—Ç")
        send_menu(
            chat_id,
            user,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÖ –î–µ–Ω—å: {user.get('day')}/{len(TASKS)}\nüî• –°–µ—Ä–∏—è: {user.get('streak') or 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n{ach_text}"
        )

    elif data == "subscribe":
        update_user(chat_id, subscribed=True)
        user = get_user(chat_id)
        send_menu(chat_id, user, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –ø–∏—Å–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

    elif data == "unsubscribe":
        update_user(chat_id, subscribed=False)
        user = get_user(chat_id)
        send_menu(chat_id, user, "‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    elif data == "help":
        send_menu(
            chat_id,
            user,
            "‚Ñπ –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–π—Ç–∏ 30-–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è:\n"
            "üìÖ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚úÖ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
            "üìä ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üîî ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "üéØ –í—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)
def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(30)

def send_scheduled_task():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º, –Ω–æ –ù–ï –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.
    –ò –ù–ï –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö –º–µ–Ω—é).
    """
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM users WHERE subscribed = TRUE;")
        subs = cur.fetchall()
    finally:
        cur.close()
        conn.close()

    for user in subs:
        try:
            task = get_task(user)
            text = f"üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{task}\n\n–ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) ‚Äî –æ—Ç–∫—Ä–æ–π –±–æ—Ç –∏ –Ω–∞–∂–º–∏ ‚úÖ."
            bot.send_message(user['chat_id'], text)
        except Exception as e:
            logging.error(f"Error in scheduled task for {user['chat_id']}: {e}")

# üåç Webhook —Å–µ—Ä–≤–µ—Ä
class Handler(http.server.BaseHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain; charset=utf-8")
        self.end_headers()
        self.wfile.write(b"Hello, I am alive!")

    def do_POST(self):
        if self.path == "/webhook":
            length = int(self.headers.get('content-length', 0))
            body = self.rfile.read(length)
            try:
                update = telebot.types.Update.de_json(body.decode("utf-8"))
            except Exception as e:
                logging.error(f"Failed to parse update body: {e}")
                self.send_response(400)
                self.end_headers()
                return

            if update.message:
                user = update.message.from_user
                logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.id}: {update.message.text}")
            elif update.callback_query:
                user = update.callback_query.from_user
                logging.info(f"üîò Callback –æ—Ç @{user.username or user.id}: {update.callback_query.data}")

            try:
                bot.process_new_updates([update])
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")

            self.send_response(200)
            self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()

class ReusableTCPServer(socketserver.TCPServer):
    allow_reuse_address = True

def start_web_server():
    port = int(os.getenv("PORT", 10000))
    with ReusableTCPServer(("", port), Handler) as httpd:
        logging.info(f"‚úÖ Webhook server running on port {port}")
        httpd.serve_forever()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    REMINDER_HOUR = os.getenv("REMINDER_HOUR", "09:00")
    schedule.every().day.at(REMINDER_HOUR).do(send_scheduled_task)
    threading.Thread(target=schedule_checker, daemon=True).start()

    start_web_server()