import os
import re
import json
import telebot
import schedule
import time
import threading
import logging
from flask import Flask, request
from psycopg2.pool import SimpleConnectionPool
from psycopg2.extras import RealDictCursor
from telebot import types
from telebot.formatting import escape_markdown
from telebot.types import Update
from datetime import datetime, timedelta, timezone
import pendulum
import random
from collections import deque
from time import monotonic

# ---------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# ---------------------- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------------------
app = Flask(__name__)

# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(BOT_TOKEN)

# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ----------------------
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")

db_pool = None
if DB_NAME and DB_USER and DB_PASSWORD:
    try:
        db_pool = SimpleConnectionPool(
            minconn=1,
            maxconn=5,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT,
            cursor_factory=RealDictCursor
        )
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
else:
    logger.warning("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

# ---------------------- –í–µ–±—Ö—É–∫ ----------------------
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    raw = request.data.decode("utf-8")
    try:
        update = Update.de_json(json.loads(raw))

        chat_id = None
        if update.message:
            chat_id = update.message.chat.id
        elif update.callback_query:
            chat_id = update.callback_query.message.chat.id

        logger.info(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update.update_id}, chat_id={chat_id}"
        )

        bot.process_new_updates([update])
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s", e)
    return "ok", 200

# ---------------------- –ö–æ–º–∞–Ω–¥—ã ----------------------
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç, –∏ —è —Ä–∞–±–æ—Ç–∞—é!")

@bot.message_handler(commands=['help'])
def help_handler(message):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/echo <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–≤—Ç–æ—Ä—é —Ç–≤–æ–π —Ç–µ–∫—Å—Ç\n"
    )
    bot.reply_to(message, text)

@bot.message_handler(commands=['echo'])
def echo_handler(message):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        bot.reply_to(message, f"–¢—ã —Å–∫–∞–∑–∞–ª: {escape_markdown(args[1])}", parse_mode="MarkdownV2")
    else:
        bot.reply_to(message, "–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª ü§∑")

# ---------------------- –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------------
def scheduled_task():
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–ø—Ä–∏–º–µ—Ä)")

schedule.every(1).hours.do(scheduled_task)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=run_scheduler, daemon=True).start()

# ---------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ----------------------
def setup_webhook():
    render_url = os.getenv("RENDER_EXTERNAL_URL")
    if render_url:
        full_webhook_url = f"{render_url}/{BOT_TOKEN}"
        bot.remove_webhook()
        time.sleep(1)
        success = bot.set_webhook(url=full_webhook_url, timeout=60)
        if success:
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_webhook_url}")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
    else:
        logger.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        bot.remove_webhook()
        bot.infinity_polling(timeout=60, long_polling_timeout=30)

# ---------------------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    setup_webhook()
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
