import os
import telebot
import schedule
import time
import threading
import logging
import logging.handlers
from flask import Flask, request
from psycopg2.pool import SimpleConnectionPool
from psycopg2.extras import RealDictCursor
from telebot import types
from datetime import datetime, timedelta
from html import escape
from ratelimiter import RateLimiter
import pendulum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_handler = logging.handlers.RotatingFileHandler('bot.log', maxBytes=10*1024*1024, backupCount=5)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[log_handler, logging.StreamHandler()]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise RuntimeError("BOT_TOKEN –∏–ª–∏ TELEGRAM_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        raise RuntimeError("DATABASE_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not HOSTNAME:
        raise RuntimeError("RENDER_EXTERNAL_HOSTNAME –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    ADMIN_ID = os.getenv("TELEGRAM_ADMIN_ID")
    if not ADMIN_ID:
        raise RuntimeError("TELEGRAM_ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
except RuntimeError as e:
    logging.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–∞
bot = telebot.TeleBot(TOKEN)
WEBHOOK_URL = f"https://{HOSTNAME}/webhook"
app = Flask(__name__)

# –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_POOL = SimpleConnectionPool(1, 20, dsn=DATABASE_URL)

# –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è Telegram API
rate_limiter = RateLimiter(max_calls=30, period=1)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_LOCK = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
TIMEZONE = os.getenv("BOT_TIMEZONE", "UTC")
REMINDER_HOUR = os.getenv("REMINDER_HOUR", "09:00")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î)
TASKS = [
    "–î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–∏ 10 –∫–ª—é—á–µ–≤—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥.",
    "–î–µ–Ω—å 2: –°–æ—Å—Ç–∞–≤—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (–≤–æ–¥–∞, –∑–∞—Ä—è–¥–∫–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è).",
    "–î–µ–Ω—å 3: –û—Ç–∫–∞–∂–∏—Å—å –æ—Ç –æ–¥–Ω–æ–π –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.",
    "–î–µ–Ω—å 4: –í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ –º—ã—Å–ª–µ–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.",
    "–î–µ–Ω—å 5: –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
    "–î–µ–Ω—å 6: –°–¥–µ–ª–∞–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å –Ω–∞ 6 —á–∞—Å–æ–≤.",
    "–î–µ–Ω—å 7: –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏, –æ—Ç–º–µ—Ç—å –ø–æ–±–µ–¥—ã.",
    "–î–µ–Ω—å 8: –ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∞–≤–∏–ª–æ –ü–∞—Ä–µ—Ç–æ 20/80.",
    "–î–µ–Ω—å 9: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–Ω—è.",
    "–î–µ–Ω—å 10: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro (25/5).",
    "–î–µ–Ω—å 11: –ù–∞–≤–µ–¥–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ.",
    "–î–µ–Ω—å 12: –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.",
    "–î–µ–Ω—å 13: –°–¥–µ–ª–∞–π 2 —á–∞—Å–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã.",
    "–î–µ–Ω—å 14: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
    "–î–µ–Ω—å 15: –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
    "–î–µ–Ω—å 16: –ü—Ä–∞–∫—Ç–∏–∫—É–π –ø—É–±–ª–∏—á–Ω—ã–µ –º–∏–Ω–∏-–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.",
    "–î–µ–Ω—å 17: –ù–∞—É—á–∏—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª.",
    "–î–µ–Ω—å 18: –ü—Ä–æ—á–∏—Ç–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ª–∏–¥–µ—Ä–∞.",
    "–î–µ–Ω—å 19: –°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ.",
    "–î–µ–Ω—å 20: –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç.",
    "–î–µ–Ω—å 21: –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: –æ—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    "–î–µ–Ω—å 22: –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —É—á—ë–±—ã –Ω–∞ 1 –≥–æ–¥.",
    "–î–µ–Ω—å 23: –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.",
    "–î–µ–Ω—å 24: –ü—Ä–∞–∫—Ç–∏–∫—É–π –≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑.",
    "–î–µ–Ω—å 25: –°–æ—Å—Ç–∞–≤—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
    "–î–µ–Ω—å 26: –°–¥–µ–ª–∞–π —Ä–µ–≤–∏–∑–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
    "–î–µ–Ω—å 27: –ü–æ–¥–µ–ª–∏—Å—å –∑–Ω–∞–Ω–∏—è–º–∏.",
    "–î–µ–Ω—å 28: –ò—Ç–æ–≥–∏: —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü.",
    "–î–µ–Ω—å 29: –û–ø—Ä–µ–¥–µ–ª–∏ 3 –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –º–µ—á—Ç—ã.",
    "–î–µ–Ω—å 30: –°–æ–∑–¥–∞–π –∫–∞—Ä—Ç—É –∂–∏–∑–Ω–∏."
]

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    5: "üèÖ –ú–æ–ª–æ–¥–µ—Ü! 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    10: "ü•à –¢—ã –º–∞—à–∏–Ω–∞! 10 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞!",
    20: "ü•á –ñ–µ–ª–µ–∑–Ω–∞—è —Å–∏–ª–∞ –≤–æ–ª–∏! 20 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
    30: "üëë –ì–µ—Ä–æ–π —á–µ–ª–ª–µ–Ω–¥–∂–∞! 30 –¥–Ω–µ–π!"
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    return DATABASE_POOL.getconn()

def release_db(conn):
    DATABASE_POOL.putconn(conn)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with get_db() as conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
            cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                chat_id BIGINT PRIMARY KEY,
                day INTEGER DEFAULT 1,
                streak INTEGER DEFAULT 0,
                last_done DATE,
                achievements TEXT[] DEFAULT '{}',
                subscribed BOOLEAN DEFAULT FALSE,
                username TEXT,
                last_menu_message_id INTEGER
            );
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tasks
            cur.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                day INTEGER PRIMARY KEY,
                description TEXT NOT NULL
            );
            """)
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
            cur.execute("SELECT COUNT(*) FROM tasks")
            if cur.fetchone()['count'] == 0:
                for i, task in enumerate(TASKS, 1):
                    cur.execute("INSERT INTO tasks (day, description) VALUES (%s, %s)", (i, task))
            conn.commit()
        release_db(conn)
    logging.info("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

init_db()

# –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def init_user(chat_id, username=None):
    safe_username = escape(username) if username else None
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
                user = cur.fetchone()
                if not user:
                    cur.execute("INSERT INTO users (chat_id, username, day) VALUES (%s, %s, %s)", (chat_id, safe_username, 1))
                    conn.commit()
            release_db(conn)

def get_user(chat_id):
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
                user = cur.fetchone()
            release_db(conn)
        return user

def update_user(chat_id, **kwargs):
    if not kwargs:
        return
    allowed_fields = {
        "day", "streak", "last_done", "achievements",
        "subscribed", "username", "last_menu_message_id"
    }
    safe_kwargs = {k: v for k, v in kwargs.items() if k in allowed_fields}
    if not safe_kwargs:
        logging.warning(f"update_user: –Ω–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {chat_id}: {list(kwargs.keys())}")
        return

    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                try:
                    fields = ", ".join([f"{k} = %s" for k in safe_kwargs.keys()])
                    values = list(safe_kwargs.values())
                    values.append(chat_id)
                    cur.execute(f"UPDATE users SET {fields} WHERE chat_id = %s", tuple(values))
                    conn.commit()
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ update_user –¥–ª—è {chat_id}: {e}")
            release_db(conn)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_task(user):
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                day = user.get('day') or 1
                cur.execute("SELECT description FROM tasks WHERE day = %s", (day,))
                task = cur.fetchone()
                return task['description'] if task else "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            release_db(conn)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def check_achievements(user):
    unlocked = []
    current_streak = user.get('streak') or 0
    existing = user.get('achievements') or []
    for threshold, text in ACHIEVEMENTS.items():
        str_threshold = str(threshold)
        if current_streak >= threshold and str_threshold not in existing:
            new_achievements = existing + [str_threshold]
            update_user(user['chat_id'], achievements=new_achievements)
            unlocked.append(text)
            existing = new_achievements
    return unlocked

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
def next_task(user):
    today = datetime.utcnow().date()
    last_done = user.get('last_done')
    streak = user.get('streak') or 0

    if last_done:
        if today == last_done + timedelta(days=1):
            streak += 1
        elif today == last_done:
            pass
        else:
            streak = 1
    else:
        streak = 1

    current_day = user.get('day') or 1
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT COUNT(*) FROM tasks")
                max_days = cur.fetchone()['count']
            release_db(conn)
    new_day = current_day + 1 if current_day < max_days else current_day
    update_user(user['chat_id'], day=new_day, streak=streak, last_done=today)
    user = get_user(user['chat_id'])
    return get_task(user), check_achievements(user), user

# –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def cleanup_inactive_users():
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                threshold = datetime.utcnow().date() - timedelta(days=90)
                cur.execute("DELETE FROM users WHERE last_done < %s", (threshold,))
                conn.commit()
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ {cur.rowcount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            release_db(conn)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_inline_keyboard(user):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today"),
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="next")
    )
    keyboard.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    keyboard.add(types.InlineKeyboardButton("‚Ñπ –ü–æ–º–æ—â—å", callback_data="help"))
    keyboard.add(
        types.InlineKeyboardButton(
            "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if not user.get('subscribed', False) else "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data="subscribe" if not user.get('subscribed', False) else "unsubscribe"
        )
    )
    return keyboard

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def send_message_with_rate_limit(chat_id, text, **kwargs):
    with rate_limiter:
        for attempt in range(3):
            try:
                return bot.send_message(chat_id, text, **kwargs)
            except Exception as e:
                logging.warning(f"–ü–æ–≤—Ç–æ—Ä {attempt+1}/3: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
                time.sleep(2 ** attempt)
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id} –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
def send_menu(chat_id, user, text):
    try:
        fresh_user = get_user(chat_id) or user or {'subscribed': False}
        prev_id = fresh_user.get('last_menu_message_id')
        if prev_id:
            try:
                bot.delete_message(chat_id, prev_id)
                logging.debug(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é {prev_id} –¥–ª—è {chat_id}")
            except Exception:
                logging.debug(f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ {chat_id}")
            update_user(chat_id, last_menu_message_id=None)

        msg = send_message_with_rate_limit(chat_id, text, reply_markup=get_inline_keyboard(fresh_user))
        if msg:
            update_user(chat_id, last_menu_message_id=msg.message_id)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ send_menu –¥–ª—è {chat_id}: {e}")
        send_message_with_rate_limit(chat_id, "‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    init_user(message.chat.id, message.from_user.username)
    user = get_user(message.chat.id)
    send_menu(
        message.chat.id,
        user,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ 30-–¥–Ω–µ–≤–Ω–æ–º –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
    )

# –ö–æ–º–∞–Ω–¥–∞ /stats
@bot.message_handler(commands=['stats'])
def stats(message):
    user = get_user(message.chat.id)
    ach_list = []
    for x in (user.get('achievements') or []):
        try:
            ach_list.append(ACHIEVEMENTS.get(int(x), ""))
        except Exception:
            pass
    ach_text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + ("\n".join(ach_list) if ach_list else "–ø–æ–∫–∞ –Ω–µ—Ç")
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT COUNT(*) FROM tasks")
                total_days = cur.fetchone()['count']
            release_db(conn)
    send_menu(
        message.chat.id,
        user,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÖ –î–µ–Ω—å: {user.get('day')}/{total_days}\nüî• –°–µ—Ä–∏—è: {user.get('streak') or 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n{ach_text}"
    )

# –ö–æ–º–∞–Ω–¥–∞ /all_stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(commands=['all_stats'])
def all_stats(message):
    if str(message.chat.id) != str(ADMIN_ID):
        logging.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /all_stats –æ—Ç {message.chat.id}")
        send_message_with_rate_limit(message.chat.id, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT chat_id, username, day, streak FROM users ORDER BY day DESC LIMIT 500;")
                users = cur.fetchall()
            release_db(conn)

    if not users:
        send_message_with_rate_limit(message.chat.id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–º–∞–∫—Å 500):\n"
    for u in users:
        uname = f"@{u['username']}" if u.get('username') else u['chat_id']
        text += f"- {uname}: –¥–µ–Ω—å {u.get('day')}, —Å–µ—Ä–∏—è {u.get('streak')} –¥–Ω–µ–π\n"
    send_message_with_rate_limit(message.chat.id, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    chat_id = call.message.chat.id
    init_user(chat_id, call.from_user.username)
    user = get_user(chat_id)
    data = call.data

    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ callback: {e}")

    if data == "today":
        send_menu(chat_id, user, f"üìå –°–µ–≥–æ–¥–Ω—è: {get_task(user)}")

    elif data == "next":
        task, achievements, user = next_task(user)
        with DB_LOCK:
            with get_db() as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    cur.execute("SELECT COUNT(*) FROM tasks")
                    total_days = cur.fetchone()['count']
                release_db(conn)
        text = f"‚û° –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}\n\nüî• –°–µ—Ä–∏—è: {user.get('streak')} –¥–Ω–µ–π\nüìÖ –î–µ–Ω—å {user.get('day')}/{total_days}"
        send_menu(chat_id, user, text)
        for ach in achievements:
            send_message_with_rate_limit(chat_id, f"üéâ {ach}")

    elif data == "stats":
        ach_list = []
        for x in (user.get('achievements') or []):
            try:
                ach_list.append(ACHIEVEMENTS.get(int(x), ""))
            except Exception:
                pass
        ach_text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + ("\n".join(ach_list) if ach_list else "–ø–æ–∫–∞ –Ω–µ—Ç")
        with DB_LOCK:
            with get_db() as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cur:
                    cur.execute("SELECT COUNT(*) FROM tasks")
                    total_days = cur.fetchone()['count']
                release_db(conn)
        send_menu(
            chat_id,
            user,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÖ –î–µ–Ω—å: {user.get('day')}/{total_days}\nüî• –°–µ—Ä–∏—è: {user.get('streak') or 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n{ach_text}"
        )

    elif data == "subscribe":
        update_user(chat_id, subscribed=True)
        user = get_user(chat_id)
        send_menu(chat_id, user, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –ø–∏—Å–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

    elif data == "unsubscribe":
        update_user(chat_id, subscribed=False)
        user = get_user(chat_id)
        send_menu(chat_id, user, "‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    elif data == "help":
        send_menu(
            chat_id,
            user,
            "‚Ñπ –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–π—Ç–∏ 30-–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è:\n"
            "üìÖ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚úÖ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
            "üìä ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üîî ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "üéØ –í—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_scheduled_task():
    now = pendulum.now(TIMEZONE)
    with DB_LOCK:
        with get_db() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT * FROM users WHERE subscribed = TRUE;")
                subs = cur.fetchall()
            release_db(conn)

    for user in subs:
        try:
            task = get_task(user)
            send_message_with_rate_limit(
                user['chat_id'],
                f"üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({now.to_formatted_date_string()}):\n{task}\n\n–ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) ‚Äî –æ—Ç–∫—Ä–æ–π –±–æ—Ç –∏ –Ω–∞–∂–º–∏ ‚úÖ."
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è {user['chat_id']}: {e}")

def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(30)

# –í–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä
@app.route('/webhook', methods=['POST'])
def webhook():
    body = request.get_data(as_text=True)
    try:
        update = telebot.types.Update.de_json(body)
        if update.message:
            user = update.message.from_user
            logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.id}: {getattr(update.message, 'text', '')}")
        elif update.callback_query:
            user = update.callback_query.from_user
            logging.info(f"üîò Callback –æ—Ç @{user.username or user.id}: {update.callback_query.data}")
        bot.process_new_updates([update])
        return '', 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return '', 400

@app.route('/')
def index():
    return "–ü—Ä–∏–≤–µ—Ç, —è –∂–∏–≤!", 200

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"üîó –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    schedule.every().day.at(REMINDER_HOUR).do(send_scheduled_task)
    schedule.every().week.do(cleanup_inactive_users)
    threading.Thread(target=schedule_checker, daemon=True).start()

    port = int(os.getenv("PORT", 10000))
    app.run(host='0.0.0.0', port=port)