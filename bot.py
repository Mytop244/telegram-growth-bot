import os
import random
import logging
from logging.handlers import RotatingFileHandler
from queue import Queue
from threading import Thread
from flask import Flask, request
import telebot

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(), RotatingFileHandler('bot.log', maxBytes=1_000_000, backupCount=2)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app = Flask(__name__)
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.getenv("PORT", 10000))

if not (TOKEN and WEBHOOK_URL):
    logger.error("BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
def load_advices(file_path="advices.txt"):
    try:
        with open(file_path, encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()] or _default_advices()
    except FileNotFoundError:
        return _default_advices()

def _default_advices():
    return ["–ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã", "–í—ã—Ö–æ–¥–∏ –≥—É–ª—è—Ç—å", "–í—ã—Å—ã–ø–∞–π—Å—è"]

advices = load_advices()
emojis = ["üåü", "‚ú®", "üî•"]

# –û—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
update_queue = Queue(maxsize=50)

def process_updates():
    while True:
        try:
            update = update_queue.get(timeout=5)
            if update is None: break
            bot.process_new_updates([update])
            update_queue.task_done()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")

Thread(target=process_updates, daemon=True).start()

# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def start(msg):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {msg.from_user.id}")
    bot.reply_to(msg, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–≤–µ—Ç—á–∏–∫ üßô‚Äç‚ôÇÔ∏è\n–ù–∞–ø–∏—à–∏ /advice –¥–ª—è —Å–æ–≤–µ—Ç–∞!")

@bot.message_handler(commands=["advice"])
def advice(msg):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /advice –æ—Ç {msg.from_user.id}")
    text = random.choice(emojis) if random.random() < 0.2 else f"{random.choice(advices)} {random.choice(emojis)}"
    bot.reply_to(msg, text)

@bot.message_handler(content_types=["text"])
def handle_text(msg):
    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç {msg.from_user.id}: {msg.text}")
    bot.reply_to(msg, "–ü–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ /start –∏ /advice üòä")

# Webhook
@app.post("/webhook")
def webhook():
    try:
        data = request.get_data().decode("utf-8")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç: {data[:50]}...")
        update = telebot.types.Update.de_json(data)
        if update:
            update_queue.put(update)
            return "ok", 200
        logger.warning("–ü—É—Å—Ç–æ–π –∞–ø–¥–µ–π—Ç")
        return "ok", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "error", 500

@app.get("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        bot.set_webhook(url=f"{WEBHOOK_URL}/webhook", drop_pending_updates=True, timeout=10)
        webhook_info = bot.get_webhook_info()
        logger.info(f"Webhook info: {webhook_info.url}, pending updates: {webhook_info.pending_update_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1)

if __name__ == "__main__":
    set_webhook()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{PORT}")
    app.run(host="0.0.0.0", port=PORT, debug=False)
